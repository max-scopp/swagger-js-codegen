/* eslint-disable */
// tslint:disable

{{#imports}}
/// <reference path="{{&.}}" />
{{/imports}}

import fetch, { Request, Response, Headers } from "node-fetch";
import FormData from 'form-data';

export type RequestHeaders = {
    [header: string]: string;
}

export type RequestHeadersHandler = (headers: Headers) => Headers;

export type ConfigureRequestHandler = (agent: Request) => Request;

export type CallbackHandler = (err: any, res?: Response) => void;

abstract class Model<T> {
    constructor(values?: T) {
        if(values) {
            Object.assign(this, values)
        }
    }

    toString() {
        return JSON.stringify(this);
    }
}

{{#definitions}}
    {{#isClass}}
        {{#description}}
        /**
         * {{description}}
         */{{/description}}
        export interface I{{&name}}
            {{#tsType}}{{> type}}{{/tsType}}

        export class Built{{&name}} extends Model<I{{&name}}> {
            constructor(values) {
                super(values);

                {{#tsType}}
                    {{#properties}}
                        {{#tsType}}
                            {{#isRef}}
                this['{{&name}}'] = new {{&target}}(values['{{&name}}']);
                            {{/isRef}}
                        {{/tsType}}
                    {{/properties}}
                {{/tsType}}
            }
        }

        {{#description}}
        /**
         * {{description}}
         */{{/description}}
        export class {{&name}} extends Built{{&name}}
            {{#tsType}}{{> type}}{{/tsType}}

    {{/isClass}}
    {{^isClass}}
        {{#description}}
        /**
         * {{description}}
         */{{/description}}
        export type {{&name}} = {{#tsType}}{{> type}}{{/tsType}};
    {{/isClass}}
{{/definitions}}

export type Logger = { log: (line: string) => any };


export interface ResponseWithBody<S extends number, T> {
    readonly headers: Headers;
    readonly ok: boolean;
    readonly redirected: boolean;
    readonly status: S;
    readonly statusText: string;
    readonly trailer: Promise<Headers>;
    readonly type: ResponseType;
    readonly url: string;
    readonly body: T;
    readonly bodyUsed: boolean;
    clone(): SwaggerResponse<T>;
    readonly original: Response;
    arrayBuffer(): Promise<ArrayBuffer>;
    blob(): Promise<Blob>;
    json(): Promise<any>;
    text(): Promise<string>;
}


class SwaggerResponse<T> implements ResponseWithBody<number, T> {
    protected readonly _originalResponse: Response;

    headers: Headers;
    ok: boolean;
    redirected: boolean;
    status: number;
    statusText: string;
    trailer: Promise<Headers>;
    type: ResponseType;
    url: string;
    body: T;
    bodyUsed: boolean;

    constructor(response: Response | SwaggerResponse<T>) {
        if(response instanceof SwaggerResponse) {
            this._originalResponse = response.original
        } else {
            this._originalResponse = response
        }

        this.bodyUsed = response.bodyUsed;
        this.headers = response.headers;
        this.ok = response.ok;
        this.redirected = response.redirected;
        this.status = response.status;
        this.statusText = response.statusText;
        this.type = response.type;
        this.url = response.url;
    }

    arrayBuffer(): Promise<ArrayBuffer> {
        return this.original.arrayBuffer();
    }
    blob(): Promise<Blob> {
        return this.original.blob();
    }
    
    json(): Promise<any> {
        return this.original.json();
    }
    text(): Promise<string> {
        return this.original.text();
    }

    get original() {
        return this._originalResponse
    }

    clone() {
        return new SwaggerResponse<T>(this);
    }
}

class SwaggerErrorResponse<T = any> extends Error implements ResponseWithBody<number, T> {
    protected _originalResponse: Response;
    headers: Headers;
    ok: boolean;
    redirected: boolean;
    status: number;
    statusText: string;
    trailer: Promise<Headers>;
    type: ResponseType;
    url: string;
    body: T;
    bodyUsed: boolean;
    
    clone: () => SwaggerResponse<T>;
    arrayBuffer: () => Promise<ArrayBuffer>;
    blob: () => Promise<Blob>;
    json: () => Promise<any>;
    text: () => Promise<string>;

    constructor(response: SwaggerResponse<T>) {
        super([response.status, response.url, response.statusText].join(' '));
        const body = response.body as any;
        if(body && body.error && body.message) {
            this.name = body.error
            this.message = body.message
        }

        Object.assign(this, response)

        this.clone = response.clone;
        this.arrayBuffer = response.arrayBuffer;
        this.blob = response.blob;
        this.json = response.json;
        this.text = response.text;
    }

    get original() {
        return this._originalResponse;
    }
}

export interface CommonRequestOptions {
  $queryParameters?: {[param: string]: any};
  $domain?: string;
  $path?: string | ((path: string) => string);
}

type ParamGetter = ((p: { [k: string]: any }) => string | DynamicParam);
type DynamicParam = ((p: { [k: string]: any }) => string);

type Parameters = {
    [k: string]: RegExp | string | ParamGetter
}

type Definition = {
    path: string,
    method: string,
    callable: (ctx: {{&className}}) => (parameters: {[k:string]: any}) => Promise<any>,
    params: Parameters,
    headers: {[k:string]: string | ParamGetter},
    body?: (p: {[k:string]:any}) => string,
    form?: {
        [k: string]: string | ParamGetter
    },
    required?: string[]
}

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string)} [domainOrOptions] - The project domain.
 */
export class {{&className}} {

    private domain: string = "{{&domain}}";
    private errorHandlers: CallbackHandler[] = [];
    private requestHeadersHandler?: RequestHeadersHandler;
    private configureRequestHandler?: ConfigureRequestHandler;

    private static readonly entries: {[k:number]: Definition} = {
        {{#methods}}
            {{> map}}
        {{/methods}}
    };

    private static readonly idMapping: {[k: string]: number[]} = (() => {
        const ids = [
        {{#methods}}
            ['{{&path}}', {{position}}],
        {{/methods}}
        ];

        let mapping = {};
        ids
            .map(([path, position]) => [(path as string).toLowerCase(), position])
            .map(([path, position]) =>
                mapping[path] ?
                mapping[path].push(position) : mapping[path] = [position]
            );

        return mapping;
    })();

    constructor(domain?: string, protected headers: {[name: string]: string} = {}, private logger?: Logger) {
        if(domain) {
            this.domain = domain;
        }
    }

    isRequired(paramName: string, parameters: {[key: string]: any}, paramType: string, displayName: string, reject?: Function) {
        if(parameters[paramName] === undefined) {
            this.isUnexpected(`Missing required ${paramType} parameter: "${displayName}"`, reject);
        }
    }

    resolveParam(value: string | ParamGetter, parameters: {[key: string]: any | ParamGetter}, optional?: true) {
        const resolve = (staticOrDynamicValue) => {
            // if another function, it's referenced
            // to an dynamic (user provided) parameter value,
            // otherwise it's statically resolved
            return typeof staticOrDynamicValue === "function"
                ? staticOrDynamicValue(parameters)
                : staticOrDynamicValue;
        }

        if (typeof value === "string") {
            const definition = parameters[value];

            if(!optional && !definition){
                return value;
            }

            // static or dynamic value resolvement.
            if (typeof definition === "function") {
                const staticOrDynamicValue = definition(parameters);

                return resolve(staticOrDynamicValue);
            }

            return definition;
        }

        return resolve(
            value(parameters)
        );
    }

    isUnexpected(errorMessage, reject?) {
        const error = new Error('Unexpected Internal Error: ' + errorMessage);
        if(reject) {
            reject(error);
        } else {
            throw error;
        }
    }

    getDomain() {
        return this.domain;
    }

    addErrorHandler(handler: CallbackHandler) {
        this.errorHandlers.push(handler);
    }

    setRequestHeadersHandler(handler: RequestHeadersHandler) {
        this.requestHeadersHandler = handler;
    }

    setConfigureRequestHandler(handler: ConfigureRequestHandler) {
        this.configureRequestHandler = handler;
    }

/**
 * Helper function that will resolve the given URL to the connecting method to execute with.
 * You can further specify what definitive endpoint you want by providing a `method`.
 * @param {(string)} [url] - Case sensitive URL to look foor
 * @param {(string)} [method] - The Method you want to execute with
 * @return {function|function[]|null} - This function tries really hard to give you only **one** result, but it _may_ return a list - depending on `method`
 */
    getMethodForUrl(url: string, method?: string) {
        if(!/^\//.test(url)) {
            url = '/' + url;
        }

        const candidates = {{&className}}.idMapping[url.toLowerCase()];
        let resolvableIds = candidates

        if(method) {
            resolvableIds = candidates.filter((candidateId) => {
                const definition = {{&className}}.entries[candidateId];
                return definition.method === method;
            })
        }

        if(!resolvableIds) {
            throw new Error('Impossible to resolve that URL. Black Magic!');
        }

        const resolved = resolvableIds.map(id => {{&className}}.entries[id].callable(this).bind(this));

        if(resolved.length === 1) {
            return resolved[0];
        } else {
            // shouldn't happend, but theoratically...
            return resolved;
        }

    }

    private request<T>(method: string, model: any, url: string, body: any, headers: Headers, reject: CallbackHandler, resolve: CallbackHandler) {
        if(this.logger) {
            this.logger.log(`Call ${method} ${url}`);
        }

        if(body && Object.keys(body).length) {
            if(typeof(body) === 'object' && !headers['Content-Type']) {
                headers.set('Content-Type', 'application/json');
            }
        }

        if (this.requestHeadersHandler) {
            headers = this.requestHeadersHandler(headers);
        }

        let req = new Request(url, {
            method,
            headers,
            body: body instanceof Array ? JSON.stringify(body) : body
        });

        if (this.configureRequestHandler) {
            req = this.configureRequestHandler(req);
        }

        fetch(req).then((response) => {
            const isJsonResponse = /application\/json/.test(response.headers.get('content-type') || headers.get('Accept'));
            const derivedResponse = new SwaggerResponse<T>(response);

            const proceed = () => {
                if(!response.ok) {
                    const error = new SwaggerErrorResponse(derivedResponse);
                    this.errorHandlers.forEach(handler => handler(error));
                    reject(error);
                } else {
                    resolve(derivedResponse);
                }
            }

            if(isJsonResponse) {
                response.json().then(newBody => {
                    if(response.ok && model) {
                        if(newBody instanceof Array) {
                            derivedResponse.body = newBody.map(item => new model(item)) as any as T
                        } else {
                            derivedResponse.body = new model(newBody);
                        }
                    } else {
                        derivedResponse.body = newBody;
                    }
                    proceed()
                }).catch(reject)
            } else {
                proceed()
            }
        }).catch((err) => {
            this.errorHandlers.forEach(handler => handler(err));
            reject(err)
        })
    }

{{#methods}}
    {{> method}}
{{/methods}}
}

export default {{&className}};
